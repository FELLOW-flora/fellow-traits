---
title: "Exploration of FELLOW trait dataset"
execute:
  echo: false
format: pdf
---


The objective of this document is to:  

- visually explore the trait database
- understand trait coverage / data gaps
- check for possible inconsistencies  


```{r load}
#| warning: false
#| echo: false
devtools::load_all()

# Load species list with taxonomy
traits <- read.csv(
  here::here("data", "derived-data", "merged_traits.csv")
)

# Load species list with taxonomy
taxolist <- read.csv(
  here::here("data", "derived-data", "species_list_taxo.csv")
)

# Load short species list
shortlist <- read.csv(
  here::here("data", "derived-data", "species_short_list.csv")
)
```


## Description of the species list

We compiled the species lists from `{r} sum(grepl("^in_", names(taxolist)))`  datasets. 
After cleaning and harmonization, there were `{r} nrow(shortlist)` unique taxa.

```{r}
table(shortlist$accepted_rank)

# taxolist$original_taxa[is.na(taxolist$accepted_taxa)]
# might be good to add the database
# remove NAs
taxolist <- taxolist[!is.na(taxolist$accepted_taxa), ]
```

{{< pagebreak >}}
Let's define:  
*specialist*: a taxa that occured only in a singe database  
*generalist*: a taxa that is listed in 50% of the databases (8 out of 16)  

```{r}
#| fig-height: 6
#| fig-width: 8

# get the database data.frame
col_db <- grep("^in_", names(taxolist))
db <- taxolist[, col_db]
# merge per species (remove duplicates)
dbpersp <- rowsum(db, group = taxolist$accepted_taxa)
# transform as binary
dbpersp[dbpersp > 1] <- 1
# count the number of database per species
nsp_db <- apply(dbpersp, 2, sum)
# count the number of species per database
ndb <- apply(dbpersp, 1, sum)

# split species between specialists and generalists
sp_class <- cut(
  ndb,
  breaks = c(0, 1, 8, max(ndb)),
  labels = c("specialist", "other", "generalist")
)

table(sp_class)
sum_gen <- as.matrix(rowsum(dbpersp, sp_class))
colnames(sum_gen) <- gsub("^in_", "", colnames(sum_gen))
par(mar = c(4, 8, 1, 1))
barplot(
  sum_gen,
  horiz = TRUE,
  las = 1,
  xlab = "Number of species",
  col = RColorBrewer::brewer.pal(3, "Set3")
)
legend(
  "topright",
  fill = RColorBrewer::brewer.pal(3, "Set3"),
  legend = c("specialist", "other", "generalist")
)
```

{{< pagebreak >}}

## Description of trait databases

```{r}
real_traits <- !grepl("original", names(traits)) &
  names(traits) != "accepted_taxa"

# summary of NAs
num_na <- apply(is.na(traits), 2, sum)

db_na <- num_na[grep("original", names(num_na))]
names(db_na) <- gsub("original_taxa_", "", names(db_na))

trait_na <- apply(is.na(traits[, real_traits]), 2, sum)

# species with lowest completness
sp_na <- apply(is.na(traits[, real_traits]), 1, sum)
```


So far, we compiled `{r} sum(real_traits)` traits for `{r} nrow(traits)` taxa gathered from `{r} length(db_na)` trait databases. But there are many missing values.

```{r nabase}
# database with best match
par(mar = c(4, 8, 1, 1))
barplot(
  sort(db_na),
  horiz = TRUE,
  las = 1,
  xlab = "Number of missing species"
)
```



```{r natraits}
# summary of NAs
trait_db <- strsplit(names(trait_na), "_") |>
  sapply(function(x) x[[length(x)]]) |>
  factor(
    levels = names(db_na)[order(db_na)],
    ordered = TRUE
  )
# database with best match
par(mar = c(4, 8, 1, 1))
boxplot(
  trait_na ~ trait_db,
  horizontal = TRUE,
  las = 1,
  xlab = "Number of missing traits values",
  ylab = ""
)
```



```{r naspecies}
#| fig-height: 4
# hist(sp_na, xlab = "Number of missing traits", ylab = "Number of species")

# barplot(t(table(sp_na, taxolist$gbif_rank)), border = NA)
df <- data.frame(
  "cat" = cut(sp_na, breaks = seq(0, 120, by = 10), include.lowest = TRUE),
  "rank" = shortlist$accepted_rank
)
tdf <- table(df$rank, df$cat)
par(mar = c(4, 4, 1, 1))
barx <- barplot(
  tdf,
  col = hcl.colors(5, "viridis"),
  names = rep("", 12),
  xlab = "Number of missing traits",
  ylab = "Number of species"
)
barax <- c(barx - mean(diff(barx) / 2), max(barx) + mean(diff(barx) / 2))
axis(1, at = barax, seq(0, 120, by = 10))
legend(
  "topright",
  legend = firstup(row.names(tdf)),
  fill = hcl.colors(5, "viridis")
)
```


```{r}
#| fig-height: 3.8
# table(traits$accepted_taxa == names(ndb))
par(mar = c(4, 4, 1, 1))
plot(
  jitter(ndb),
  sp_na,
  xlab = "Number of datasets (jittered)",
  ylab = "Number of missing traits"
)
abline(v = c(1.5, 8.5), lwd = 2)
segments(
  par()$usr[1],
  par()$usr[3],
  1.5,
  par()$usr[3],
  col = RColorBrewer::brewer.pal(3, "Set3")[1],
  lwd = 5,
  xpd = NA
)
segments(
  1.5,
  par()$usr[3],
  8.5,
  par()$usr[3],
  col = RColorBrewer::brewer.pal(3, "Set3")[2],
  lwd = 5,
  xpd = NA
)
segments(
  8.5,
  par()$usr[3],
  par()$usr[2],
  par()$usr[3],
  col = RColorBrewer::brewer.pal(3, "Set3")[3],
  lwd = 5,
  xpd = NA
)
```


{{< pagebreak >}}


Taxa with no or limited trait information (N=`{r} sum(sp_na >=max(sp_na))`).
```{r nodata}
nodata <- traits$accepted_taxa[sp_na >= max(sp_na)]
print(nodata)
```

Open question:  

**How to deal with families taxa?**  

**How to deal with missing trait values?** Trait imputation, discarding taxa, ...

{{< pagebreak >}}

**Summary of trait completness**  
```{r traitcat}
trname <- names(traits)[real_traits]

trone <- sapply(strsplit(trname, "_"), function(x) x[[1]])
trone <- gsub(".mm2.mg.1", "", trone) # SLA must be checked in metatraits
trone <- gsub("Fruit.colour", "Fruit.color", trone) # to be replaced in metatraits
trone[grepl("Flower.UV.reflectance", trone)] <- "Flower.UV.reflectance"

# calculate the completeness of each traits
trna <- apply(!is.na(traits[, real_traits]), 1, as.numeric)
summaryna <- apply(rowsum(trna, trone) > 0, 1, sum)
# to be removed: variables with no information
summaryna <- summaryna[summaryna > 0]

completness <- data.frame(
  "trait" = names(summaryna),
  "database" = as.numeric(table(trone[trone %in% names(summaryna)])),
  "N_taxa" = as.numeric(summaryna),
  "completness" = round(as.numeric(summaryna) / nrow(traits) * 100)
)

# DT::datatable(completness)
knitr::kable(
  completness[order(completness$N_taxa, decreasing = TRUE), ],
  row.names = FALSE,
  col.names = c("Trait", "N database", "N taxa", "Completness (%)")
)
```


{{< pagebreak >}}

## Comparison

### SLA
There are three sources of information for Specific leaf area (SLA) : Hodgson et al. 2023 (in mm2/mg), GIFT (in cm2/g) and BIEN (in m2/kg = mm2/mg).

```{r sla}
# names(traits)[grep("SLA", names(traits))]
sla <- data.frame(
  "Hodgson" = traits$SLA.mm2.mg.1_Hodgson2023,
  "GIFT" = traits$SLA_cm2.g.1_GIFT / 10,
  "BIEN" = traits$SLA_m2.kg.1_BIEN
)

pairs(sla, lower.panel = panel.smooth, upper.panel = panel.cor)
```

Values are highly correlated, so we could imagine filling the missing values (using preferred data sources or averaging them).  

**Number of NAs:**  
```{r fillsla}
# sla$average <- apply(sla, 1, mean, na.rm = TRUE)
sla$filled <- ifelse(
  is.na(sla$GIFT),
  ifelse(is.na(sla$BIEN), sla$Hodgson, sla$BIEN),
  sla$GIFT
)

print(apply(is.na(sla), 2, sum))
```


{{< pagebreak >}}


### Plant height
There are six sources of information for plant height.

```{r height}
#| fig-height: 5

# names(traits)[grep("Height", names(traits))]

# transform height in FlorealData
traits$Plant.height_cm_FlorealData <- ifelse(
  traits$Plant.height_cm_FlorealData >= 100,
  NA,
  traits$Plant.height_cm_FlorealData
)
height <- data.frame(
  "spvignes" = traits$Plant.height_cm_SPVignes / 100,
  "FlorealData" = traits$Plant.height_cm_FlorealData / 100,
  "lososova" = traits$Plant.height_m_Lososova2023,
  "BIEN" = traits$Plant.height_m_BIEN,
  "GIFT" = traits$Plant.height_mean_m_GIFT,
  "Ecoflora" = traits$Plant.height_m_Ecoflora
)

pairs(height, lower.panel = panel.smooth, upper.panel = panel.cor)
```


SPVignes and FlorealData are limited to small plants (<1m) (no trees) *but FlorealData>100cm must be clean*.


**Number of NAs:**  
```{r fillheight}
# height$average <- apply(height, 1, mean, na.rm = TRUE)
colfill <- sapply(apply(!is.na(height), 1, which), function(x) {
  ifelse(length(x) > 0, x[[1]], NA)
})
height$filled <- height[cbind(1:nrow(height), colfill)]
print(apply(is.na(height), 2, sum))
```

{{< pagebreak >}}

### Seed mass
There are five sources of information for seed mass

```{r seed}
#| fig-height: 5
# names(traits)[grep("seed", names(traits))]

seed <- data.frame(
  "lososova" = traits$Seed.mass_mg_Lososova2023,
  "BIEN" = traits$Seed.mass_mg_BIEN,
  "GIFT" = traits$Seed.mass_g_GIFT * 1000,
  "Ecoflora" = traits$Seed.mass_mg_Ecoflora,
  "Biolflor" = traits$Seed.mass_mg_Biolflor
)

pairs(seed, lower.panel = panel.smooth, upper.panel = panel.cor)
```

**Number of NAs:**  
```{r fillseed}
# sla$average <- apply(sla, 1, mean, na.rm = TRUE)
colfill <- sapply(apply(!is.na(seed), 1, which), function(x) {
  ifelse(length(x) > 0, x[[1]], NA)
})
seed$filled <- seed[cbind(1:nrow(seed), colfill)]

print(apply(is.na(seed), 2, sum))
```


{{< pagebreak >}}

### Flower colour
There are five sources of information for flower colour, but it must be cleaned

```{r color}
# names(traits)[grep("col", names(traits))]
color <- data.frame(
  "Baseflor" = traits$Flower.color_Baseflor,
  "BIEN" = traits$Flower.color_BIEN,
  "GIFT" = traits$Flower.color_GIFT,
  "FlorealData" = traits$Flower.color_FlorealData,
  "Biolflor" = traits$Flower.color_Biolflor,
  "YvozValPol" = traits$Flower.color_YvozValPol
)
print(apply(is.na(color), 2, sum))


# removing unclear color patterns for genus
baseflor <- color$Baseflor
baseflor[grepl("_", baseflor)] <- NA
table(baseflor, useNA = "ifany")
```

